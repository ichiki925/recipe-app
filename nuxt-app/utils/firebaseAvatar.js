import { getStorage, ref as storageRef, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage'

/**
 * „Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉè„ÇíFirebase Storage„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
 * @param {File} file - „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åô„Çã„Éï„Ç°„Ç§„É´
 * @param {string} userId - „É¶„Éº„Ç∂„ÉºID (Firebase UID)
 * @returns {Object} - { url: string, path: string }
 */
export const uploadAvatarToFirebase = async (file, userId) => {
    try {
        if (!file || !userId) {
            throw new Error('„Éï„Ç°„Ç§„É´„Åæ„Åü„ÅØ„É¶„Éº„Ç∂„ÉºID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
        }

        const storage = getStorage()
        const timestamp = Date.now()
        const cleanFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_')
        const fileName = `avatars/${userId}_${timestamp}_${cleanFileName}`
        const avatarRef = storageRef(storage, fileName)

        console.log('üì§ Firebase Storage - „Ç¢„Éê„Çø„ÉºÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã:', {
            fileName,
            fileSize: file.size,
            fileType: file.type
        })

        // „Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
        const snapshot = await uploadBytes(avatarRef, file)
        const downloadURL = await getDownloadURL(snapshot.ref)

        console.log('‚úÖ Firebase Storage - „Ç¢„Éê„Çø„ÉºÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü:', {
            fileName,
            downloadURL
        })

        return {
            url: downloadURL,
            path: fileName
        }
    } catch (error) {
        console.error('‚ùå Firebase Storage - „Ç¢„Éê„Çø„ÉºÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº:', error)
        throw new Error(`ÁîªÂÉè„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`)
    }
}

/**
 * Firebase Storage„Åã„Çâ„Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉè„ÇíÂâäÈô§
 * @param {string} imagePath - ÂâäÈô§„Åô„Çã„Éï„Ç°„Ç§„É´„ÅÆ„Éë„Çπ
 */
export const deleteAvatarFromFirebase = async (imagePath) => {
    try {
        if (!imagePath) {
            console.log('üîç ÂâäÈô§ÂØæË±°„ÅÆ„Éë„Çπ„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
            return
        }

        const storage = getStorage()
        const avatarRef = storageRef(storage, imagePath)

        await deleteObject(avatarRef)
        console.log('üóëÔ∏è Firebase Storage - „Ç¢„Éê„Çø„ÉºÁîªÂÉèÂâäÈô§ÂÆå‰∫Ü:', imagePath)
    } catch (error) {
        if (error.code === 'storage/object-not-found') {
            console.log('üìù Firebase Storage - „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„ÇìÔºàÊó¢„Å´ÂâäÈô§Ê∏à„ÅøÔºâ:', imagePath)
        } else {
            console.error('‚ùå Firebase Storage - „Ç¢„Éê„Çø„ÉºÁîªÂÉèÂâäÈô§„Ç®„É©„Éº:', error)
            // ÂâäÈô§„Ç®„É©„Éº„ÅØËá¥ÂëΩÁöÑ„Åß„ÅØ„Å™„ÅÑ„ÅÆ„Åß„ÄÅ‰æãÂ§ñ„ÇíÂÜç„Çπ„É≠„Éº„Åó„Å™„ÅÑ
        }
    }
}

/**
 * Firebase Storage URL„Åã„Çâ„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÊäΩÂá∫
 * @param {string} firebaseUrl - Firebase Storage URL
 * @returns {string} - „Éï„Ç°„Ç§„É´„Éë„Çπ
 */
export const extractPathFromFirebaseUrl = (firebaseUrl) => {
    try {
        if (!firebaseUrl || !firebaseUrl.includes('firebasestorage.googleapis.com')) {
            return null
        }

        const parsedUrl = new URL(firebaseUrl)
        const pathMatch = parsedUrl.pathname.match(/\/o\/(.+)/)

        if (pathMatch && pathMatch[1]) {
            return decodeURIComponent(pathMatch[1])
        }

        return null
    } catch (error) {
        console.error('‚ùå Firebase URL „Éë„Éº„Çπ „Ç®„É©„Éº:', error)
        return null
    }
}